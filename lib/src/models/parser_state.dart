import 'package:flutter/material.dart';

import '../parsing/components/style_applicator.dart';
import '../parsing/tokenizer.dart';
import '../widgets/textf_options.dart';
import 'format_stack_entry.dart';
import 'token.dart';

/// Encapsulates the state of the parser during the parsing process.
///
/// This class maintains all the state variables needed during parsing,
/// including the input tokens, current format stack, and output spans.
/// It also provides methods for common state operations like flushing
/// accumulated text with the current formatting applied.
class ParserState {
  /// The tokens being parsed
  final List<Token> tokens;

  /// The base text style to apply to all text
  final TextStyle baseStyle;

  /// TextfOptions for customizing formatting styles
  final TextfOptions? options;

  /// Tokenizer for processing nested formatting
  final TextfTokenizer tokenizer;

  /// Map of opening marker indices to their closing counterparts
  final Map<int, int> matchingPairs;

  /// The spans generated by the parsing operation
  final List<InlineSpan> spans = [];

  /// Buffer for accumulating text between formatting markers
  String textBuffer = '';

  /// Stack of active formatting markers
  final List<FormatStackEntry> formatStack = [];

  /// Set of token indices that have been processed
  final Set<int> processedIndices = {};

  /// Creates a new parser state with the specified parameters.
  ParserState({
    required this.tokens,
    required this.baseStyle,
    required this.options,
    required this.tokenizer,
    required this.matchingPairs,
  });

  /// Flushes accumulated text with the current formatting applied.
  ///
  /// This method:
  /// 1. Checks if there's any text in the buffer
  /// 2. Applies all active formatting styles to the text
  /// 3. Adds the formatted text as a span
  /// 4. Clears the text buffer
  void flushText() {
    if (textBuffer.isEmpty) return;

    // Calculate current style based on format stack
    var style = baseStyle;
    for (final entry in formatStack) {
      style = StyleApplicator.applyStyle(style, entry.type, options);
    }

    spans.add(TextSpan(text: textBuffer, style: style));
    textBuffer = '';
  }
}
